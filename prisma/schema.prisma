// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Inmomanager schemas

enum Role {
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  firstName String   @db.VarChar
  lastName  String   @db.VarChar
  email     String   @unique @db.VarChar
  password  String   @db.VarChar
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id              String     @id @default(uuid())
  firstName       String     @db.VarChar
  lastName        String     @db.VarChar
  phone           String     @db.VarChar
  email           String     @unique @db.VarChar
  experienceSince Int        @db.Integer
  avatar          String     @db.VarChar
  //language        String     @db.VarChar
  properties      Property[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model District {
  id         String     @id @db.Char(6)
  name       String     @db.VarChar
  properties Property[]
  province   Province   @relation(fields: [provinceId], references: [id])
  provinceId String     @db.Char(6)
}

model Province {
  id           String     @id @db.Char(6)
  name         String     @db.VarChar
  district     District[]
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.Char(6)
}

model Department {
  id       String     @id @db.Char(6)
  name     String     @db.VarChar
  province Province[]
}

model Property {
  id          String   @id @default(uuid())
  code        String   @db.VarChar
  title       String   @unique @db.VarChar
  description String   @db.VarChar
  address     String   @db.VarChar
  price       Decimal  @db.Decimal(10, 2)
  district    District @relation(fields: [districtId], references: [id])
  districtId  String   @db.Char(6)
  agent       Agent    @relation(fields: [agentId], references: [id])
  agentId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //amenity     Amenity  @relation(fields: [amenityId], references: [id])
  //amenityId   String   @unique @db.Char(6)
}

// model Amenity {
//   id               String     @id @default(uuid())
//   securityCameras  Boolean    @db.Boolean
//   garden           Boolean    @db.Boolean
//   jacuzzi          Boolean    @db.Boolean
//   television       Boolean    @db.Boolean
//   gym              Boolean    @db.Boolean
//   // heather = calefacci√≥n
//   heater           Boolean    @db.Boolean
//   wifi             Boolean    @db.Boolean
//   sharedPool       Boolean    @db.Boolean
//   // fumished = fumigado
//   fumished         Boolean    @db.Boolean
//   coveredParking   Boolean    @db.Boolean
//   kitchenAppiances Boolean    @db.Boolean
//   property         Property? 
// }
